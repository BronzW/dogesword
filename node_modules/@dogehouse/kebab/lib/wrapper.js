"use strict";
// @ts-nocheck because internet is unpredictable
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrap = void 0;
var wrap = function (connection) { return ({
    connection: connection,
    subscribe: {
        newChatMsg: function (handler) {
            return connection.addListener("new_chat_msg", handler);
        },
    },
    query: {
        getCurrentRoomUsers: function () { return connection.fetch("get_current_room_users"); },
        getTopPublicRooms: function (cursor) {
            if (cursor === void 0) { cursor = 0; }
            return connection.fetch("get_top_public_rooms", { cursor: cursor });
        },
        getScheduledRooms: function (cursor, getOnlyMyScheduledRooms) {
            if (cursor === void 0) { cursor = ""; }
            if (getOnlyMyScheduledRooms === void 0) { getOnlyMyScheduledRooms = false; }
            return connection.fetch("get_scheduled_rooms", {
                cursor: cursor,
                getOnlyMyScheduledRooms: getOnlyMyScheduledRooms,
            });
        },
    },
    mutation: {
        joinRoom: function (id) {
            return connection.fetch("join_room", { roomId: id }, "join_room_done");
        },
        sendRoomChatMsg: function (ast, whisperedTo) {
            if (whisperedTo === void 0) { whisperedTo = []; }
            return connection.send("send_room_chat_msg", { tokens: ast, whisperedTo: whisperedTo });
        },
        leaveRoom: function () {
            return connection.fetch("leave_room", {}, "you_left_room");
        },
        createRoom: function (data) {
            return connection.fetch("create_room", data);
        },
        editRoom: function (data) {
            return connection.fetch("edit_room", data);
        },
    },
}); };
exports.wrap = wrap;
