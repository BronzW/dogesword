"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connect = void 0;
var isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
var reconnecting_websocket_1 = __importDefault(require("reconnecting-websocket"));
var uuid_1 = require("uuid");
var heartbeatInterval = 8000;
var apiUrl = "wss://api.dogehouse.tv/socket";
var connectionTimeout = 15000;
var connect = function (token, refreshToken, _a) {
    var _b = _a.logger, logger = _b === void 0 ? function () { } : _b, _c = _a.onConnectionTaken, onConnectionTaken = _c === void 0 ? function () { } : _c, _d = _a.url, url = _d === void 0 ? apiUrl : _d;
    return new Promise(function (resolve, reject) {
        var socket = new reconnecting_websocket_1.default(url, [], {
            connectionTimeout: connectionTimeout,
            WebSocket: isomorphic_ws_1.default,
        });
        var apiSend = function (opcode, data, fetchId) {
            var raw = "{\"op\":\"" + opcode + "\",\"d\":" + JSON.stringify(data) + (fetchId ? ",\"fetchId\":\"" + fetchId + "\"" : "") + "}";
            socket.send(raw);
            logger("out", opcode, data, fetchId, raw);
        };
        var listeners = [];
        socket.addEventListener("open", function () {
            var heartbeat = setInterval(function () {
                socket.send("ping");
                logger("out", "ping");
            }, heartbeatInterval);
            socket.addEventListener("close", function (error) {
                clearInterval(heartbeat);
                if (error.code === 4003)
                    onConnectionTaken();
                reject(error);
            });
            apiSend("auth", {
                accessToken: token,
                refreshToken: refreshToken,
                reconnectToVoice: false,
                currentRoomId: null,
                muted: false,
                platform: "uhhh web sure",
            });
            socket.addEventListener("message", function (e) {
                if (e.data === "\"pong\"") {
                    logger("in", "pong");
                    return;
                }
                var message = JSON.parse(e.data);
                logger("in", message.op, message.d, message.fetchId, e.data);
                if (message.op === "auth-good") {
                    var connection_1 = {
                        addListener: function (opcode, handler) {
                            var listener = { opcode: opcode, handler: handler };
                            listeners.push(listener);
                            return function () { return listeners.splice(listeners.indexOf(listener)); };
                        },
                        user: message.d.user,
                        send: apiSend,
                        fetch: function (opcode, parameters, doneOpcode) {
                            return new Promise(function (resolveFetch) {
                                var fetchId = !doneOpcode && uuid_1.v4();
                                var unsubscribe = connection_1.addListener(doneOpcode !== null && doneOpcode !== void 0 ? doneOpcode : "fetch_done", function (data, arrivedId) {
                                    if (!doneOpcode && arrivedId !== fetchId)
                                        return;
                                    resolveFetch(data);
                                    unsubscribe();
                                });
                                apiSend(opcode, parameters, fetchId || undefined);
                            });
                        },
                    };
                    resolve(connection_1);
                }
                else {
                    listeners
                        .filter(function (_a) {
                        var opcode = _a.opcode;
                        return opcode === message.op;
                    })
                        .forEach(function (it) { return it.handler(message.d, message.fetchId); });
                }
            });
        });
    });
};
exports.connect = connect;
