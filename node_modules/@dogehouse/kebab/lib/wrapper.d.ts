import { Connection } from "./raw";
import { Message, MessageToken, Room, RoomUser, UUID } from "./entities";
import { GetTopPublicRoomsResponse, GetScheduledRoomsResponse } from "./responses";
declare type Handler<Data> = (data: Data) => void;
export declare type Wrapper = ReturnType<typeof wrap>;
export declare const wrap: (connection: Connection) => {
    connection: Connection;
    subscribe: {
        newChatMsg: (handler: Handler<{
            userId: UUID;
            msg: Message;
        }>) => () => void;
    };
    query: {
        getCurrentRoomUsers: () => Promise<{
            users: RoomUser[];
            muteMap: Record<string, boolean>;
            roomId: string;
            activeSpeakerMap: Record<string, boolean>;
            autoSpeaker: boolean;
        }>;
        getTopPublicRooms: (cursor?: number) => Promise<GetTopPublicRoomsResponse>;
        getScheduledRooms: (cursor?: "" | number, getOnlyMyScheduledRooms?: boolean) => Promise<GetScheduledRoomsResponse>;
    };
    mutation: {
        joinRoom: (id: UUID) => Promise<void>;
        sendRoomChatMsg: (ast: MessageToken[], whisperedTo?: string[]) => Promise<void>;
        leaveRoom: () => Promise<{
            roomId: UUID;
        }>;
        createRoom: (data: {
            name: string;
            privacy: string;
            description: string;
        }) => Promise<{
            error: string;
        } | {
            room: Room;
        }>;
        editRoom: (data: {
            name: string;
            privacy: string;
            description: string;
        }) => Promise<{
            error: string;
        } | {
            room: Room;
        }>;
    };
};
export {};
